" LINUX VERSION

" Vundle ============================================================
" Make sure you have Vundle installed:
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.
Plugin 'tpope/vim-fugitive'  " :Git commands
Plugin 'airblade/vim-gitgutter'
Plugin 'itchyny/lightline.vim'
Plugin 'jpalardy/vim-slime'
Plugin 'mechatroner/rainbow_csv'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plugin 'junegunn/fzf.vim'
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'preservim/nerdtree'  " file explorer
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'ycm-core/YouCompleteMe' " Uncomment relevant lines in install_linux.sh

" Optional plugins
" -----------------------------------------------------------
" Plugin 'krzysztofarendt/indentpython.vim'
" Plugin 'davidhalter/jedi-vim' " Python, works out-of-the-box on most systems
" -----------------------------------------------------------

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" To ignore plugin indent changes, instead use:
" filetype plugin on

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal

" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line =========================

if has('autocmd')
  filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

set autoindent
set backspace=indent,eol,start
set complete-=i
set smarttab

set nrformats-=octal

if !has('nvim') && &ttimeoutlen == -1
  set ttimeout
  set ttimeoutlen=100
endif

set incsearch
set hlsearch
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

set laststatus=2
set ruler
set wildmenu

if !&scrolloff
  set scrolloff=3
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline

if &encoding ==# 'latin1' && has('gui_running')
  set encoding=utf-8
endif

if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

if has('path_extra')
  setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

set autoread

if &history < 1000
  set history=1000
endif
if &tabpagemax < 50
  set tabpagemax=50
endif
if !empty(&viminfo)
  set viminfo^=!
endif
set sessionoptions-=options
set viewoptions-=options

" Tab -> 4 spaces
set tabstop=4
set shiftwidth=4
set expandtab

" Choose color scheme
set background=dark
colorscheme PaperColor

" Line numbers
set number
nnoremap <F6> :set number!<CR>

" Cursor line
set cursorline

" Encoding
set encoding=utf-8

" Remove all trailing whitespace upon saving
autocmd BufWritePre * %s/\s\+$//e

" Find files recursively
" set path+=**

" NERDTree shortcut
inoremap <F7> <ESC>:NERDTreeToggle<CR>
nnoremap <F7> :NERDTreeToggle<CR>
nnoremap <F8> :NERDTreeFind<CR>
inoremap <F8> <ESC>:NERDTreeFind<CR>

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
" Press zR to unfold all
nnoremap <space> za

" Disable docstring pop-up in jedi-vim
autocmd FileType python setlocal completeopt-=preview

" Disable arrow keys in all modes except insert
noremap <Left> <nop>
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Right> <nop>

" Allow moving up and down within wrapped lines
noremap j gj
noremap k gk

" Do not break words when wrapping
set linebreak

" Line breaks at column 80 for *.todo files
" autocmd bufreadpre *.todo setlocal textwidth=80

" vim-slime
let g:slime_target = "vimterminal"
let g:slime_vimterminal_cmd = "ipython"
let g:slime_cell_delimiter = "#%%"
nmap <leader>c <Plug>SlimeSendCell

" netrw
let g:netrw_list_hide= '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_banner=0
let g:netrw_browse_split=0

" lightline: show absolute path
let g:lightline = {
    \ 'colorscheme': 'powerline',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ], [ 'gitbranch', 'readonly', 'absolutepath', 'modified', ] ],
    \ },
    \ 'component_function': {
    \   'gitbranch': 'FugitiveHead'
    \ },
    \ }
set noshowmode  " get rid of --INSERT-- below status line

" Replace selection with register
let @r = '"xd"0P'

" Syntax highlighting in .md files
au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown

" Very magic search
nnoremap / /\v

" Source .vimrc with F5
noremap <F5> <ESC>:source ~/.vimrc<CR>

" CTRL+N to enter normal mode in terminal
tnoremap <c-n> <c-w><s-n>

" Play video with mpv ===============================================
" Play selected audio or video with mpv
" Works with files, YouTube links, and YouTube IDs
" Select link the in visual mode and press \p
" e.g.
" - https://www.youtube.com/watch?v=PVyS9JwtFoQ
" - PVyS9JwtFoQ
" - /path/to/file.mp4
" - /path/to/file.wav
"
" To install mpv:
" > sudo apt install mpv
" ===================================================================
function! PlayVideo(path)
    let l:spl_path = split(a:path, '\.')
    if len(l:spl_path) > 1
        " Path to file or link
        execute ':term mpv --ytdl-format="(mp4,webm)[width<=640]+worstaudio" ' . a:path
    else
        " YouTube ID
        let l:yt_link = "https://www.youtube.com/watch?v=" . a:path
        execute ':term mpv --ytdl-format="(mp4,webm)[width<=640]+worstaudio" ' . l:yt_link
    endif
endfunction

vnoremap <leader>p y:call PlayVideo("<C-R>"")<CR>


" Settings to be unlocked manually ==================================

" YouCompleteMe - enable popup documentation
nmap <leader>k <plug>(YCMHover)
nmap <leader>d :YcmCompleter GoTo<CR>

" Highlight particular column
" set colorcolumn=80

" Enable text wrapping
" set textwidth=80
